You are given an integer array 'ARR' of size 'N' and an integer 'S'. Your task is to return the list of all pairs of elements such that each sum of elements of each pair equals 'S'.

Note:

Each pair should be sorted i.e the first value should be less than or equals to the second value. 

Return the list of pairs sorted in non-decreasing order of their first value. In case if two pairs have the same first value, the pair with a smaller second value should come first.

5 5
1 2 3 4 5
Sample Output 1:
1 4
2 3
Explaination For Sample Output 1:
Here, 1 + 4 = 5
      2 + 3 = 5
Hence the output will be, (1,4) , (2,3).
Sample Input 2:
5 0
2 -3 3 3 -2
Sample Output 2:
-3 3
-3 3
-2 2






import java.io.*;
import java.util.*;

public class Solution {
    public static List<int[]> pairSum(int[] arr, int s) {
        List<int[]> list = new ArrayList<>();
        
        // Check all pairs where arr[i] + arr[j] == s
        for(int i = 0; i < arr.length; i++) {
            for(int j = i + 1; j < arr.length; j++) {
                if(arr[i] + arr[j] == s) {
                    // Store the pair with smaller number first
                    int[] pair = new int[] {Math.min(arr[i], arr[j]), Math.max(arr[i], arr[j])};
                    list.add(pair);
                }
            }
        }
        
        // Sort the pairs first by the first element and then by the second element if needed
        Collections.sort(list, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        
        return list;
    }
}
